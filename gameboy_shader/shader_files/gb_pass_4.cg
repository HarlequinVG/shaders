///////////////////////////////////////////////////////////////////////////
//                                                                       //
// Gameboy Classic Shader                                                //
//                                                                       //
// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
//                                                                       //
// This program is free software: you can redistribute it and/or modify  //
// it under the terms of the GNU General Public License as published by  //
// the Free Software Foundation, either version 3 of the License, or     //
// (at your option) any later version.                                   //
//                                                                       //
// This program is distributed in the hope that it will be useful,       //
// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
// GNU General Public License for more details.                          //
//                                                                       //
// You should have received a copy of the GNU General Public License     //
// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
//                                                                       //
///////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//config                                                                                                                                  //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//intended for testing purposes only - you'll likely get better picture quality by changing settings or changing palette/background files than enabling these
#define SCENE_ONLY			//shows scene only (no shadows or background)
//#define SHADOWS_ONLY			//shows shadows only (no scene or background)
//#define BACKGROUND_ONLY		//shows background only (no scene or shadows)
//#define SCENE_AND_SHADOWS		//shows scene blended with shadows (no background image)
//#define SCENE_AND_BACKGROUND		//shows scene blended with background (no shadows)
//#define SHADOWS_AND_BACKGROUND	//show shadows blended with background image (no scene)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//structs                                                                                                                                 //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct input
{
    float2 video_size;
    float2 texture_size;
    float2 output_size;
    float frame_count;
    sampler2D texture : TEXUNIT0;
};

struct pass_2
{
    sampler2D texture : TEXUNIT1;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//vertex shader                                                                                                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void main_vertex( float4 position      			: POSITION,
  		  out float4 oPosition 			: POSITION,
  		  float2 texCoord      			: TEXCOORD0,
  		  out float2 oTexCoord 			: TEXCOORD0,
  		  uniform float4x4 modelViewProj,
  		  uniform input IN )
{
    oPosition = mul(modelViewProj, position);
    oTexCoord = texCoord;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//fragment definitions                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define bg_tint_coordinate float2(0.5, 0.125)	//coordinate of the transparent tint from the color palette file

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//fragment shader                                                                                                                         //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 main_fragment( float2 texCoord        		: TEXCOORD0, 
		      uniform sampler2D BACKGROUND	: TEXUNIT2,
		      uniform sampler2D COLOR_PALETTE	: TEXUNIT3,
		      uniform input IN,
		      uniform pass_2 PASS2 )     	: COLOR
{
  //sample all the textures going into the final output

    fixed4 scene_texture = tex2D(PASS2.texture, texCoord);
    fixed4 shadow_texture = tex2D(IN.texture, texCoord);
    fixed4 bg_texture = tex2D(BACKGROUND, texCoord) * fixed4(tex2D(COLOR_PALETTE, bg_tint_coordinate).rgb, 0.0);


  //alpha blend the shadows with the background image

    fixed4 shadow_modified_color = shadow_texture * shadow_texture.a;
    fixed shadow_modified_alpha = 1.0 - shadow_texture.a;
    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);		//form of bg_texture = (shadow_texture * shadow_texture.a) + (bg_texture * (1.0 - shadow_texture.a));


  //darkens the shadow on the background - higher quality than directly increasing the shadow's alpha values (ie. shadow_texture.a *= 1.2) but there must be a better way...

    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);
    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);
    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);
    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);
    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);
    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);
    bg_texture = shadow_modified_color + (bg_texture * shadow_modified_alpha);

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//debugging                                                                                              //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef SCENE_ONLY
    return scene_texture;
#endif

#ifdef SHADOWS_ONLY
    return shadow_texture;
#endif

#ifdef BACKGROUND_ONLY
    return tex2D(BACKGROUND, texCoord) * fixed4(tex2D(COLOR_PALETTE, bg_tint_coordinate).rgb, 0.0);
#endif

#ifdef SCENE_AND_SHADOWS
    return (scene_texture * scene_texture.a) + (shadow_texture * (1 - scene_texture.a));
#endif

#ifdef SCENE_AND_BACKGROUND
    return (scene_texture * scene_texture.a) + 
	   ((tex2D(BACKGROUND, texCoord) * fixed4(tex2D(COLOR_PALETTE, bg_tint_coordinate).rgb, 0.0)) * (1 - scene_texture.a));
#endif

#ifdef SHADOWS_AND_BACKGROUND
    return bg_texture;
#endif
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

  //alpha blend the scene with the shadowed background image and return

    return (scene_texture * scene_texture.a) + (bg_texture * (1 - scene_texture.a));
}